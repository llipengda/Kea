# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, ECNU-SE-lab
# This file is distributed under the same license as the Kea package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kea 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-30 19:40+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../source/part-keaUserManuel/Android_Studio.rst:4
msgid "使用安卓模拟器配置安卓环境"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:8
msgid "**前提条件：** 在你的电脑上安装 Android Studio。"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:10
msgid "你可以在 https://developer.android.com/studio 下载 Android Studio。"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:13
msgid ""
"Kea 依赖 ``adb`` 命令与 Android 设备进行交互。关键是要确保 ADB（Android 调试桥）命令可用。 "
"以下教程将帮助你设置整个 Android SDK 工具套件。但请记住，将 ``adb`` 命令添加到路径中就足够了。"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:19
msgid "1. 设置命令行工具（adb）"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:22
#: ../source/part-keaUserManuel/harmonyos_setup.rst:41
msgid "MacOS 和 Linux"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:24
#: ../source/part-keaUserManuel/Android_Studio.rst:56
msgid "在你的电脑上安装了 Android Studio。你需要做的是将 Android sdk 其添加至 PATH 环境变量，让其在终端中生效。"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:26
msgid ""
"有关详细信息，请参见 `Android Studio 文档：环境变量 "
"<https://developer.android.com/tools/variables>`_。"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:28
msgid ""
"如果你使用的是 zsh 或 bash，请使用 ``EXPORT`` 命令设置 ``ANDROID_HOME`` "
"环境变量。``ANDROID_HOME`` 环境变量应指向你的 SDK 安装路径。默认路径是 "
"``/usr/Library/Android/sdk/``。你可以通过 :guilabel:`Android Studio` -> "
":guilabel:`设置` -> :guilabel:`语言与框架` -> :guilabel:`Android SDK` 查看你的安装路径。"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:31
#: ../source/part-keaUserManuel/Android_Studio.rst:61
msgid "在此窗口中，查看 :guilabel:`SDK 工具`，安装 **Android SDK 平台工具**。"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:36
#: ../source/part-keaUserManuel/Android_Studio.rst:66
msgid "Android Studio 中 Android SDK 路径的示例"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:38
msgid "然后，将路径添加到 .bashrc 或 .zshrc 文件中。"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:47
#: ../source/part-keaUserManuel/harmonyos_setup.rst:50
msgid "``source`` shell的配置文件以激活修改。"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:49
msgid "text"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:51
msgid "在终端中输入 ``adb`` 检查设置是否成功。"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:54
msgid "Windows"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:58
msgid ""
"如果你使用的是 zsh 或 bash，请使用 ``EXPORT`` 命令设置 ``ANDROID_HOME`` "
"环境变量。``ANDROID_HOME`` 环境变量应指向你的 SDK 安装路径。默认路径是 "
"``C:\\Users\\usr_name\\AppData\\Local\\Android\\Sdk``。你可以通过 "
":guilabel:`文件` -> :guilabel:`设置` -> :guilabel:`语言与框架` -> "
":guilabel:`Android SDK` 查看你的安装路径。"
msgstr ""

#: ../source/part-keaUserManuel/Android_Studio.rst:68
msgid ""
"然后，将以下路径添加到 PATH 变量中。请参见 `Windows系统中如何添加 PATH 环境变量 "
"<https://helpdeskgeek.com/windows-10/add-windows-path-environment-"
"variable/>`_。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:2
msgid "在 Linux 上设置 Android SDK 环境"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:4
#: ../source/part-keaUserManuel/androidSDK/Mac.rst:4
#: ../source/part-keaUserManuel/androidSDK/Windows.rst:4
msgid ""
"安装 Android 命令行工具。 前往 `Android Developer "
"<https://developer.android.com/studio>`_ 并下载与你的操作系统匹配的工具。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst
#: ../source/part-keaUserManuel/androidSDK/Mac.rst
msgid "你可以在命令行中使用 ``wget`` 下载工具下载压缩包，也可以从浏览器中下载并自行解压。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:14
#: ../source/part-keaUserManuel/androidSDK/Mac.rst:14
msgid ""
"你可以从上述 `Android Developer <https://developer.android.com/studio>`_ "
"网站复制下载链接。 然后使用以下命令。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:24
#: ../source/part-keaUserManuel/androidSDK/Mac.rst:24
#: ../source/part-keaUserManuel/androidSDK/Windows.rst:20
msgid "配置相关环境。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:26
#: ../source/part-keaUserManuel/androidSDK/Mac.rst:26
#: ../source/part-keaUserManuel/androidSDK/Windows.rst:22
msgid ""
"安装 Java。（如果你之前已经安装并配置过Java，你需要检查你的 JDK 是否与命令行工具适配。如果版本适配，你可以跳过以下关于 Java "
"环境配置的步骤）"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst
#: ../source/part-keaUserManuel/androidSDK/Mac.rst
msgid "我们使用 ``JDK-17`` 来运行安卓模拟器。。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:34
#: ../source/part-keaUserManuel/androidSDK/Mac.rst:34
msgid "打开你的 ``.bashrc`` 文件。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:40
#: ../source/part-keaUserManuel/androidSDK/Mac.rst:40
msgid "在文件末尾添加以下内容。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst
#: ../source/part-keaUserManuel/androidSDK/Mac.rst
msgid "确保 ``PATH`` 配置与你存储相关工具的路径匹配。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:51
msgid "最后，重新装载 ``.bashrc`` 文件，使更改立即应用于当前终端会话。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:57
msgid "验证 ``sdkmanager`` 是否成功安装。 .. code-block:: bash"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:60
msgid "sdkmanager --update sdkmanager --list sdkmanager --licenses"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:64
#: ../source/part-keaUserManuel/androidSDK/Mac.rst:64
msgid "如果你获得如下信息，则安装成功。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:71
#: ../source/part-keaUserManuel/androidSDK/Mac.rst:71
#: ../source/part-keaUserManuel/androidSDK/Windows.rst:75
msgid ""
"你可以从 `sdkmanager 的常用命令 <https://developer.android.com/tools/sdkmanager>`_"
" 了解更多。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:74
msgid "WSL 常见问题"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:76
msgid "**1. WSL 依赖项**"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:78
msgid "请将你的 Windows 升级到 Win11，并使用 WSL 2。这将解决大多数 Win10 和 WSL 1 中的 WSL 问题。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:80
msgid "**2. WSL PATH 设置**"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:82
msgid ""
"默认情况下，WSL 将共享 Windows 系统中的环境变量。有时这会导致错误的行为。 你可能会发现你使用的实际可执行文件并不是你通过 "
"``which`` 命令找到的文件。此问题的根本原因是：WSL 中的 ``which`` 命令只能找到 WSL 的 PATH "
"中的可执行文件。但是，如果你在 Windows PATH 和 WSL PATH 中同时配置了一个可执行文件（例如 python3），而 "
"Windows PATH 在 WSL PATH "
"之前设置（``PATH=$Windows_PATH:$WSL_PATH``）。那么你使用的实际可执行文件就是 Windows_PATH "
"中的文件。但你通过 ``which`` 找到的则是 WSL_PATH 中的文件。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:85
msgid "要解决此问题，你可以按照以下建议操作："
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:87
msgid "在设置 PATH 时将你的环境 PATH 放在前面"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:89
msgid ""
"使用 ``PATH=New_PATH:$PATH`` 而不是 "
"``PATH=$PATH:New_PATH``。这是一个良好的习惯，可以优先考虑你的最新设置并确保其始终有效。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:91
msgid "禁用环境变量的共享"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:105
msgid "**3. CPU 硬件加速问题**"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:109
msgid ""
"This user doesn't have permissions to use KVM (/dev/kvm), ERROR: x86 "
"emulation currently requires hardware acceleration!"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Linux.rst:116
msgid ""
"请遵循 `Stack Overflow - Android Studio: /dev/kvm device permission denied "
"<https://stackoverflow.com/questions/37300811/android-studio-dev-kvm-"
"device-permission-denied>`_ 中的第一个解决方案。 然后，注销并重新登录Linux。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Mac.rst:2
msgid "在 MAC OS 上设置 Android SDK 环境"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Mac.rst:50
msgid "最后，重新装载 ``.zshrc`` 文件，使更改立即应用于当前终端会话。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Mac.rst:56
#: ../source/part-keaUserManuel/androidSDK/Windows.rst:65
msgid "验证 ``sdkmanager`` 是否成功安装。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:2
msgid "在 Windows 上设置 Android SDK 环境"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:12
msgid "将下载的 ZIP 文件解压到你希望安装 SDK 的目录中。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:14
msgid "将 ``cmdline-tools`` 文件夹中的内容移动到最新文件夹中。最终结构应为："
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:24
msgid ""
"访问 `Oracle JDK "
"<https://www.oracle.com/java/technologies/downloads/#jdk21-windows>`_ "
"的官方网站，选择适合 Windows 的版本并下载。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst
msgid "在这里，你可以使用 ``JDK-21``。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:28
msgid "然后运行下载的安装程序，按照提示完成安装。 确保记下安装路径以备将来参考。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:35
msgid "设置环境变量。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:37
msgid "打开环境变量设置："
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:39
msgid "右键单击 ``此电脑`` 或 ``计算机``，选择 ``属性``。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:40
msgid "点击 ``高级系统设置``。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:41
msgid "在 ``系统属性`` 窗口中选择 ``环境变量``。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:45
msgid ""
"在 ``系统变量`` 部分，点击 ``新建`` 添加 ``JAVA_HOME`` 变量，值设置为 JDK "
"安装路径（``D:\\Java\\jdk-21``）。 并添加 ``ANDROID_HOME`` 变量，值设置为 AndroidSDK "
"安装路径（``D:\\AndroidSDK``）。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:48
msgid ""
"找到 ``Path`` 变量，点击 ``编辑``，然后添加 "
"``%JAVA_HOME%\\bin``、``%ANDROID_HOME%\\tools``、``%ANDROID_HOME%\\emulator``、``%ANDROID_HOME"
"%\\cmdline-tools\\latest\\bin``、 "
"``%ANDROID_HOME%\\tools\\bin``、``%ANDROID_HOME%\\cmdline-tools\\latest`` "
"和 ``%ANDROID_HOME%\\platform-tools``。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:51
msgid "验证安装"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:53
msgid "打开命令提示符：按 ``Win + R``，输入 cmd，然后按 ``Enter``。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:55
msgid "在命令提示符窗口中，输入 ``java -version`` 和 ``javac -version``，然后按 Enter。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:63
msgid "如果显示版本信息，则表示配置成功。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/Windows.rst:73
msgid "在这里，你应该会看到信息显示 ``All SDK package licenses accepted``。"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/emulator.rst:2
msgid "创建并运行模拟器"
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/emulator.rst:4
msgid ""
"在运行 Kea 之前，你需要创建一个模拟器。有关如何使用 `avdmanager "
"<https://developer.android.com/studio/command-line/avdmanager>`_ 创建 avd "
"的信息，请参见 `此链接 <https://stackoverflow.com/questions/43275238/how-to-set-"
"system-images-path-when-creating-an-android-avd>`_。 "
"以下示例命令将帮助你创建一个模拟器，从而快速开始使用 Kea："
msgstr ""

#: ../source/part-keaUserManuel/androidSDK/emulator.rst:14
msgid "接下来，你可以使用以下命令启动一个模拟器并分配其端口号："
msgstr ""

#: ../source/part-keaUserManuel/api.rst:4
msgid "应用性质描述语言接口"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:6
msgid "应用性质描述语言（PDL）是Kea与被测试应用交互的方式，用户可通过接口的调用来实现与被测移动应用的交互。"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:9
msgid "用户界面交互事件"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:13
msgid ""
"目前，kea的性质描述语言底层通过 `uiautomator2 "
"<https://github.com/openatx/uiautomator2>`_ 作为交互工具，来进行与移动设备的交互。"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:15
msgid "例如，要向应用程序发送点击事件，你可以使用以下代码："
msgstr ""

#: ../source/part-keaUserManuel/api.rst:22
msgid "``d`` 是 uiautomator2 的驱动。"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:24
msgid "``resourceId`` 设置组件的编号，用于选择器定位组件。"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:26
msgid "``click()`` 表示向该组件发送点击事件。"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:28
msgid "下面是一些常用的交互事件:"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:30
msgid "click"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:36
msgid "long_click"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:42
msgid "edit text"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:48
msgid "rotate device"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:55
msgid "press [key]"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:62
msgid "在定位组件时，可以使用以下选择器。"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:65
msgid "选择器"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:67
msgid "选择器用于在用户界面中识别特定的组件，其支持以下参数："
msgstr ""

#: ../source/part-keaUserManuel/api.rst:69
msgid "``text``, ``textContains``, ``textMatches``, ``textStartsWith``"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:70
msgid "``className``, ``classNameMatches``"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:71
msgid ""
"``description``, ``descriptionContains``, ``descriptionMatches``, "
"``descriptionStartsWith``"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:72
msgid "``checkable``, ``checked``, ``clickable``, ``longClickable``"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:73
msgid "``scrollable``, ``enabled``, ``focusable``, ``focused``, ``selected``"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:74
msgid "``packageName``, ``packageNameMatches``"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:75
msgid "``resourceId``, ``resourceIdMatches``"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:76
msgid "``index``, ``instance``"
msgstr ""

#: ../source/part-keaUserManuel/api.rst:80
msgid "样例"
msgstr ""

#: ../source/part-keaUserManuel/bug_report.rst:4
msgid "缺陷报告阅读指南"
msgstr ""

#: ../source/part-keaUserManuel/bug_report.rst:9
msgid "缺陷报告示意图"
msgstr ""

#: ../source/part-keaUserManuel/bug_report.rst:11
msgid "上面的图像是 Omninotes 的一个错误报告，用户在旋转屏幕后搜索栏消失了。 因此，这违反了 ``搜索框在旋转屏幕后需要任然存在`` 这一性质。"
msgstr ""

#: ../source/part-keaUserManuel/bug_report.rst:14
msgid ""
"在测试执行完成之后，你可以在你设置的输出路径下看到 ``bug_report.html`` 。 你可以使用浏览器 (Google Chrome, "
"Firefox等) 来打开这个 ``bug_report.html``。"
msgstr ""

#: ../source/part-keaUserManuel/bug_report.rst:17
msgid ""
"报告顶部的记录了测试过程中每个用户界面状态的截图，可以帮助你识别和重现该错误。在每个截图下方， "
"你可以看到在该用户界面状态上执行的事件索引和事件类型 (例如 click, long click)。"
msgstr ""

#: ../source/part-keaUserManuel/bug_report.rst:20
msgid "``Time Consumption Statistics`` 模块记录了第一次违反性质的时间，第一次满足前置条件的时间，以及截至目前的测试总用时。"
msgstr ""

#: ../source/part-keaUserManuel/bug_report.rst:22
msgid "``Statisfaction Quantity Statistics`` 模块记录了截至目前违反性质和满足前置条件的总次数，以及总共操作的事件数。"
msgstr ""

#: ../source/part-keaUserManuel/bug_report.rst:24
msgid ""
"``bug_report.html`` 界面下方的表格显示了性质违规列表，包含每个违背性质的 ``Precondition "
"Page（前置条件界面）``, ``Interaction Page（交互场景界面）`` 和 ``Postcondition "
"Page（后置条件界面）``。 点击表格内链接将跳转到相应的截图，以帮助用户了解具体的bug触发情况。"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:2
msgid "环境配置"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:4
msgid "跟随下列指示配置鸿蒙或安卓环境。"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:8
msgid "环境配置步骤"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:10
msgid "确保 hdc 或 adb 命令可用"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:12
msgid ""
"Kea 依赖 hdc 与鸿蒙设备进行交互。 使用adb 命令与安卓设备进行交互。需要将 hdc 和 adb 工具路径添加到 PATH "
"环境变量中让其生效。"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:14
msgid "连接设备或在电脑上启动模拟器"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:21
msgid "通过 DevEco Studio 配置鸿蒙环境"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:28
msgid "通过 Android Studio 配置安卓环境"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:36
msgid "使用命令行配置安卓环境"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:38
msgid "**步骤1：在主机上安装并配置Android SDK环境**"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:40
msgid ":doc:`androidSDK/Linux`"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:42
msgid ":doc:`androidSDK/Windows`"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:44
msgid ":doc:`androidSDK/Mac`"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:46
msgid "**步骤2：创建并运行模拟器**"
msgstr ""

#: ../source/part-keaUserManuel/envirnment_setup.rst:48
msgid ":doc:`androidSDK/emulator`"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:2
msgid "编写第一个性质"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:5
msgid "检查环境"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:7
msgid ""
"Kea 是一个基于性质的移动应用测试框架，目前支持 Android 和 HarmonyOS。请确保你拥有一台移动设备，并在你的电脑上安装了 "
"Android/HarmonyOS 命令行工具。检查 ``adb`` （Android）或 ``hdc`` （HarmonyOS）是否可用。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:9
msgid "如果你没有真机，可以通过模拟器使用 Kea。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:11
msgid "请确保你已安装 ``python 3.9+``。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:15
msgid "安装"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:16
msgid "使用以下命令安装Kea"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:24
msgid "输入 ``kea -h`` 以检查 Kea 是否已成功安装。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:27
msgid "编写第一个性质(安卓)"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:29
msgid "启动你的设备或 Android 模拟器。在终端中输入 ``adb devices`` 以确保它可用。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:31
msgid ""
"我们将使用 `weditor <https://github.com/alibaba/web-editor>`_ 来检查 Android "
"元素并编写性质。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:33
msgid "**1. 启动 weditor 并安装你的应用。**"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:40
msgid ""
"上述命令将在你的电脑上安装 weditor "
"并启动它。它提供了一个主机服务器（默认：http://localhost:17310）。你可以在网页浏览器中访问它。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:45
msgid "weditor 的主页。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:47
msgid "然后，进入 kea 工作区并安装应用 omninotes。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:53
msgid "检查应用是否已成功安装。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:55
msgid "**2. Dump hierachy并检查 Android 元素**"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:57
msgid "在 weditor 中Dump hierachy以获取 Android 元素。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:59
msgid ":guilabel:`输入设备序列号` -> :guilabel:`Connect` -> :guilabel:`Dump hierachy`"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:64
msgid "从 weditor Dump hierachy"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:66
msgid ""
"连接到 weditor 后，你可以点击 :guilabel:`Dump hierachy` 来刷新元素（即Dump "
"hierachy），每当你的屏幕发生变化时。 或者，你可以启用自动Dump hierachy，以避免手动刷新元素。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:69
msgid "你可以点击一个元素并检查其属性。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:71
msgid "**3. 编写你的第一个性质**"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:73
msgid "我们在这个应用中有一个简单的功能需要检查：**旋转后搜索输入框不应被清空。**"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:75
msgid ""
"现在，让我们编写前置条件。这应该是功能开始时的唯一特征。我们想检查搜索输入框，所以让我们先移动到搜索功能。通过点击 :guilabel:`搜索` "
"按钮，你可以进入搜索编辑页面。显然，这个页面的唯一特征应该是搜索输入框本身。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:77
msgid "**在 weditor 中Dump hierachy。点击搜索框以检查其属性。**"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:82
msgid "在 weditor 中检查一个控件"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:84
msgid ""
"我们需要特定于控件的属性来定位一个控件。最常用的唯一属性是 **resourceId**。 如果没有 "
"**resourceId**，**text** 或 **className** 也可以，但大多数情况下它们不是唯一的，会导致错误。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:87
msgid "因此，为了避免 kea 进入错误状态，你可以使用多个属性在选择器中定位一个控件，并使用多个控件定位一个页面。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:89
msgid "**经过检查，我们知道搜索输入框的 resourceId。我们可以用以下命令来定位它。**"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:91
msgid "``d(resourceId=\"it.feio.android.omninotes.alpha:id/search_src_text\")``"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:95
msgid ""
"你可能会对 ``d(**选择器)`` 脚本感到困惑。这是 kea 的 PDL（Property Description Language, "
"性质描述语言） 用于与 AUT（被测应用）交互。你可以阅读 :ref:`pdl_api` 以获取详细信息。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:98
msgid "**要检查这个控件是否存在，我们调用 ``exists``。**"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:100
msgid "``d(resourceId=\"it.feio.android.omninotes.alpha:id/search_src_text\").exists()``"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:103
msgid "双击 weditor 中的控件。这将自动为你生成 **click** 的动作脚本。 你可以参考它来编写自己的脚本。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:106
msgid "**编写交互场景（即功能的作用）。**"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:108
msgid "我们需要旋转设备。从竖屏状态到横屏，再回到竖屏状态。脚本可以这样编写： ``d.rotate('l')`` ``d.rotate('n')``"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:112
msgid "**编写后置条件。旋转后输入框仍然应该存在。我们使用断言来确认它的存在。**"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:114
msgid ""
"``assert "
"d(resourceId=\"it.feio.android.omninotes.alpha:id/search_src_text\").exists()``"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:116
msgid "恭喜！你已经编写了你的第一个性质！"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:118
msgid "**4. 使用 Kea API 封装你的性质**"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:120
msgid "在 kea 的根目录下创建一个 Python 文件 **my_prop.py**。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:137
msgid "启动 kea 并检查你的性质"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:139
msgid "通过以下命令启动 kea。"
msgstr ""

#: ../source/part-keaUserManuel/first_property.rst:145
msgid ""
"检查 ``output/bug_report.html`` 中的错误报告。你可以在本教程中学习如何阅读错误报告： "
":ref:`bug_report_tutorial`。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:2
msgid "为 HarmonyOS 编写性质"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:5
msgid "HarmonyOS 的 UI 控件查看工具：uiviewer教程"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:7
msgid "我们使用 uiviewer 来支持 HarmonyOS。以下命令将为你安装并启动 uiviewer。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:15
msgid "这将启动一个主机服务器，默认情况下地址为 http://localhost:8000/。你可以通过浏览器访问该工具。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:19
msgid "HarmonyOS PDL API"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:20
msgid "我们使用 hmdriver2 作为 PDL API，与 uiautomator2 相似。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:22
msgid ""
"在 HarmonyOS 中，应用开发者指定的全局唯一的选择器是 **id** (类似安卓中的resourceId)。当没有id时，你可以使用 "
"**text** 和 **description** 等属性来定位设备。 你可以在选择器中填写多个控件属性来确保尽可能准确地定位至目标控件。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:25
msgid ""
"你可以在 `github-hmdriver2 <https://github.com/codematrixer/hmdriver2>`_ 中查看 "
"hmdriver2 的使用手册。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:27
msgid "以下是一些 HarmonyOS PDL 的示例。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:41
msgid "为 HarmonyOS 启动 Kea"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:43
msgid "你应该在 ``config.yml`` 中指定你电脑的系统。你可以查看 :ref:`yml_config` 的教程。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:45
msgid "以下是一个示例。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:54
msgid "你可以在终端或 config.yml 中指定其他参数。有关详细信息，请查看提供的 ``config.yml``。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_api.rst:57
msgid ""
"如果你在 config.yml 中指定了所有必要的参数，可以通过 ``kea -load_config`` 启动 kea。 "
"以下示例是一个完全配置的示例，可以通过 ``kea -load_config`` 启动。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:2
msgid "配置 HarmonyOS 环境"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:6
msgid "本节目标"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:8
msgid "**1. 让 `hdc` 命令可用**"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:10
msgid "Kea 依赖 hdc 命令与鸿蒙设备进行交互。关键是将 hdc 添加到 PATH 环境变量中。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:12
msgid "**2. 连接真机或使用模拟器**"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:16
msgid "1. 安装 DevEco Studio"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:17
msgid ""
"下载并安装 DevEco Studio: `下载 DevEco Studio "
"<https://developer.huawei.com/consumer/cn/deveco-studio/>`_."
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:21
msgid "2. 安装并配置 HarmonyOS SDK"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:22
msgid ""
"打开 DevEco Studio， 安装 HamonyOS SDK :guilabel:`DevEco Studio` -> "
":guilabel:`preferences` -> :guilabel:`OpenHarmony SDK`."
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:27
msgid "在 DevEco Studio 中设置 SDK"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:29
msgid "点击 :guilabel:`edit`。设置你的 SDK 路径并安装 OpenHarmony SDK 工具链。API 版本应为 12+（5.0+）。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:34
msgid "下载 toolchains (API 12+)"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:36
msgid "添加sdk toolchains到环境变量"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:53
msgid "Windows 系统"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:55
msgid "在你的电脑上安装了 DevEco Studio。你需要做的是将其工具目录添加至 PATH 变量，以便令SDK命令后工具在终端中生效。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:57
msgid ""
"如果你使用的是 zsh 或 bash，请使用 ``EXPORT`` 命令设置 ``HARMONY_SDK_HOME`` "
"环境变量。``HARMONY_SDK_HOMEE`` 环境变量应指向你的 SDK 安装路径。默认路径是 "
"``C:\\Users\\usr_name\\AppData\\Local\\OpenHarmony\\Sdk``。你可以通过 "
":guilabel:`File` -> :guilabel:`Settings` -> :guilabel:`OpenHarmony SDK` "
"-> :guilabel:`Edit` 查看你的安装路径。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:63
msgid "DevEco Studio 中 HamonyOS SDK 路径的示例"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:65
msgid ""
"然后，将以下路径添加到 PATH 变量中。请参见 `Windows 系统中如何添加 PATH 环境变量 "
"<https://helpdeskgeek.com/windows-10/add-windows-path-environment-"
"variable/>`_。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:74
msgid "在终端中运行 ``hdc``， 查看命令是否可用。"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:78
msgid "3. 运行一个模拟器"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:80
msgid ""
"根据此指南运行一个模拟器： `管理及运行模拟器 <https://developer.huawei.com/consumer/cn/doc"
"/harmonyos-guides-V13/ide-emulator-management-V13>`_"
msgstr ""

#: ../source/part-keaUserManuel/harmonyos_setup.rst:83
msgid "在终端中运行 ``hdc list targets``。 你可以看到模拟器以一个环回地址套接字(127.0.0.1:port)的形式提供。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:2
msgid "Kea 的参数选项"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:5
msgid "Kea 的参数"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:7
msgid "Kea 提供了以下选项。使用 ``kea -h`` 查看详细信息。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:9
msgid "以下参数是 kea 中最重要的参数。大多数时候，你需要指定它们。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:11
msgid "``-f``：包含性质的测试文件。你可以针对多个文件运行多个性质。参见 :ref:`target_multiple_properties`。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:13
msgid "``-a --apk``：被测试应用的安装包文件或包名。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:15
msgid ""
"``-d --device_serial``：用于测试的设备的序列号。（当只连接了一个设备时，此参数可缺省，kea将自动指定目标设备。你可以使用 "
"'adb devices' 或 'hdc list targets' 查找你的目标设备）"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:17
msgid "``-o --output``：执行结果的输出目录。（默认：\"output\"）"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:19
msgid "``-p --policy``：探索策略的名称。（**\"random\"**、**\"guided\"** 或 **\"llm\"**）"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:21
msgid "``-is_emulator``：声明目标设备为模拟器。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:23
msgid "以下是启动 kea 的一些示例。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:42
msgid "以下是用于自定义 kea 的命令。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:44
msgid "``-t --timeout``：测试时间（秒）。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:46
msgid "``-n``：每 n 个事件后，重新启动应用，默认为100。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:48
msgid "``-debug``：以调试模式运行（输出调试信息）。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:50
msgid "``-keep_app``：测试后保留设备上的应用。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:52
msgid "``-grant_perm``：安装时授予所有权限。对 Android 6.0+ 有用。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:54
msgid "``-is_harmonyos``：使用 HarmonyOS 设备"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:56
msgid "``-load_config``：从 config.yml 加载配置。config.yml 中的设置将覆盖命令行参数。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:58
msgid "``-utg``：生成UTG图。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:63
msgid "YAML 配置"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:65
msgid "你可以使用 YAML 配置来启动 kea。在你的 kea 根目录中找到 ``config.yml``。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:67
msgid "config.yml 文件用于简化通过配置文件指定参数的过程。请注意，config.yml 中的参数值将覆盖通过命令行指定的参数值。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:69
msgid "**配置参数对应关系**"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:71
msgid "以下是 config.yml 文件中的参数与 Kea 参数对象中的对应关系："
msgstr ""

#: ../source/part-keaUserManuel/options.rst:73
msgid "system: 对应 -is_harmonyos，用于指定是否使用 HarmonyOS 设备。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:75
msgid "app_path, package, package_name: 这些参数对应 -a，用于指定应用的 apk 文件路径或包名。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:77
msgid "policy: 对应 -p，用于指定探索策略。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:79
msgid "output_dir: 对应 -o，用于指定执行结果的输出目录。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:81
msgid "count: 对应 -n，用于指定测试次数。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:83
msgid "target, device, device_serial: 这些参数对应 -d，用于指定测试使用的设备序列号。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:85
msgid "property, properties, file, files: 这些参数对应 -f，用于指定包含性质的测试文件列表。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:87
msgid "以下是配置的示例。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:107
msgid "一旦完成配置，你可以简单地使用 ``kea -load_config`` 启动 kea。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:110
msgid "当你在 HarmonyOS 上使用 kea 时，config.yml 是必需的。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:115
msgid "当运行多个性质时 kea 做了什么？"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:116
msgid ""
"默认情况下，随机和主路径引导探索策略在每次运行中验证应用的一个性质。 当应用有多个性质可用时，这两种策略可以一起验证这些性质的任何子集。 "
"一个好处是 Kea 可以提高验证性质的效率。 另一个好处是多个性质的交互场景提供了应用的部分模型。 "
"这个部分模型使我们更有可能在测试期间达到应用的更深层次状态。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:122
msgid ""
"具体来说，要一起验证多个性质，随机策略会检查 多个性质的前提条件是否满足，并随机选择一个性质进行检查。 "
"主路径引导探索策略会随机选择一个性质作为目标， 并沿着其主路径进行引导探索。当这个主路径上的每个状态都被探索后， "
"这种策略会随机选择另一个性质作为新目标。 此外，当多个性质的前提条件满足时，这种策略会随机选择一个性质进行检查。"
msgstr ""

#: ../source/part-keaUserManuel/options.rst:129
msgid "你可以在 :ref:`kea_mechanism` 中查看详细信息。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:2
msgid "带状态的测试"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:4
msgid ""
"带状态的测试是一种软件测试方法，专注于系统在不同状态下的行为和响应。 "
"其原理基于状态管理和状态转移，通过设计测试用例来覆盖各种状态及其转换，以确保系统在不同条件下的正确性和一致性。 "
"此方法适合应用于需要保持状态前后一致的应用程序，通过设计带状态的测试用例， 确保系统在各种状态下正常运行，从而增强软件的可靠性和用户体验。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:9
msgid "在移动应用中，一些功能可以根据特定的输入或操作从一个状态转换到另一个状态。因此，需要额外的数据结构来支持这一点。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:11
msgid ""
"在 Kea "
"中，当你编写需要记录状态信息的性质时，可以使用带状态的测试。如以下代码所示，当你想在设备上进行文件或文件夹的相关操作时，例如创建文件、删除文件或重命名文件。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:13
msgid "你可以编写以下代码："
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:19
msgid "Bundle 类包含以下函数："
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:21
msgid "add(value: str)"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:23
msgid "向当前的 Bundle 对象内添加一个新值。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:29
msgid "delete(value: str)"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:31
msgid "从当前的 Bundle 对象中删除一个值。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:37
msgid "update(value: str, new_value: str)"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:39
msgid "将当前对象中 ``value`` 的值更新为 ``new_value``"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:45
msgid "get_all_data()"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:47
msgid "该函数会返回当前 Bundle 对象存储的值列表。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:53
msgid "get_random_value(value_len: int = 10)"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:55
msgid "该函数会随机生成一个值并返回。因此，你可以在使用 ``add`` 和 ``update`` 函数之前调用它。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:62
msgid "get_random_data()"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:64
msgid "该函数会从当前 Bundle 对象存储的值中随机选择一个值并返回。因此，你可以在使用 delete 和 update 函数之前调用它。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:71
msgid ""
"接下来是一个完整的示例，展示了如何在定义性质时使用 Kea 的状态测试。这个示例将展示如何在应用程序 `Amaze "
"<https://github.com/TeamAmaze/AmazeFileManager>`_ 中使用状态测试， ``Amaze`` "
"是一个文件管理应用， 允许用户在设备上操作文件或文件夹。这些性质是为了测试文件系统的数据操作是否存在错误而定义的。 "
"在这种情况下，带状态的测试至关重要，你可以使用 ``Bundle`` 来存储 Kea 创建的所有文件夹，并在整个测试过程中对它们进行操作。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:76
msgid ""
"首先，你可以定义一个 ``create_file_should_exist`` 性质。该性质的实现步骤如下：1. 返回到主目录。 "
"2.创建一个文件。 3.检查新文件是否存在。 这个性质可以确保在创建文件后，文件确实存在于预期的位置。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:82
msgid "创建文件夹截图"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:102
msgid ""
"接下来, 你可以定义一个 ``change_filename_should_follow`` 性质。 "
"该性质的实现步骤如下：返回到主目录，随机选择一个文件，改变它的名称，并检查原来名称的文件是否消失并且新名称的文件是否存在。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:107
msgid "重命名文件夹截图"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:137
msgid "最后, 你可以定义一个 ``del_file_should_disappear`` 性质。返回到主目录，删除一个文件，并检查该文件是否存在。"
msgstr ""

#: ../source/part-keaUserManuel/stateful testing.rst:142
msgid "删除文件夹截图"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:2
msgid "性质定义教程"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:4
msgid "在本教程中，你将学习如何使用 Kea 编写应用性质并进行测试。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:6
msgid "在移动应用中，性质定义了应用的预期行为。如果应用违反了该性质，则意味着发现了一个错误。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:8
msgid ""
"用户所定义的应用功能性质由三个关键组件组成。 **<P, I, Q>**, (1) *P* 是一个前置条件, (2) *I* "
"是一个交互场景，定义了如何执行应用功能, (3) *Q* 是一个后置条件，定义了预期的行为。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:12
msgid "Kea 给用户提供 ``@initializer()`` 帮助用户定义初始化函数，让应用能够跳过欢迎页面或登录页面。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:14
msgid "在 Kea 中，性质是通过应用 ``@rule()`` 这样一个性质函数上的装饰器来定义的。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:16
msgid "要定义性质的前置条件，用户可以在 ``@rule()`` 装饰的函数上，使用装饰器 ``@precondition()``。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:18
msgid "后置条件则在 ``@rule()`` 装饰的函数内部使用 ``assert`` 来完成定义。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:20
msgid "对于移动应用，用户可以从多个途径获取应用性质，例如应用的规范、应用的文档、应用的测试用例、应用的错误报告等。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:22
msgid "让我们从几个简单的例子开始，介绍如何获取一个性质，如何在 Kea 中编写该性质，以及如何通过 Kea 测试该性质。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:25
msgid "从应用错误报告中获取应用性质"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:27
msgid ""
"以下这个例子将展示如何从应用 `OmniNotes <https://github.com/federicoiosue/Omni-"
"Notes/>`_ 中获取一个性质。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:29
msgid ""
"`OmniNotes <https://github.com/federicoiosue/Omni-Notes/>`_ "
"是一个用于记录和管理笔记的应用。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:31
msgid ""
"本样例来自该应用的错误报告 `#634 <https://github.com/federicoiosue/Omni-"
"Notes/issues/634>`_, 用户表示，当他删除一个标签时，其他共享相同前缀的标签也被删除。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:33
msgid "然后，从这个错误报告中，可以得到一下应用性质："
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:35
msgid "在删除标签后，标签应该成功移除，笔记内容应保持不变。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:37
msgid "根据错误报告，你可以得到一个这样的应用性质："
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:39
msgid "**P (前置条件)**: 应该有标签存在。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:40
msgid "**I (交互场景)**: 从标签列表中移除某个标签。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:41
msgid "**Q (后置条件)**: 指定的标签被删除，并且其余文本内容保持不变。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:43
msgid "接下来，让我们在Kea中使用性质描述语言定义该性质。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:70
msgid ""
"``@precondition`` 装饰器定义了该性质应当开始被测试的状态节点。 代码中， "
"``d(resourceId=\"it.feio.android.omninotes:id/menu_tag\").exists()`` "
"检查了是否标签按钮存在于界面内， ``\"#\" in "
"d(resourceId=\"it.feio.android.omninotes:id/detail_content\").info[\"text\"]``"
" 检查了是否笔记内容中存在“#”字符。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:75
msgid "``@rule()`` 装饰器定义了应用性质函数。 在本段代码中，交互场景为执行移除标签的操作。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:78
msgid "后置条件则由 ``assert`` 语句来完成定义。 这里，Kea检查是否指定的标签被删除并且保持其余文本不变。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:81
msgid ""
"像这样一条性质就是应该由 `OmniNotes <https://github.com/federicoiosue/Omni-Notes/>`_ "
"应用所遵循的。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:83
msgid "此外，用户还可以定义一个初始化函数，在测试性质之前设置应用的初始状态。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:85
msgid "为了实现该功能，用户可以使用一个 ``@initializer()`` 装饰器来定义一个初始化函数并且写一些UI操作指令，来引导应用完成初始化操作:"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:97
msgid ""
"在这里，上述代码可以自动通过UI操作来跳过 `OmniNotes <https://github.com/federicoiosue/Omni-"
"Notes/>`_ 的欢迎页面。 你可以使用 ``@initializer()`` 装饰器来定义任意应用的初始化函数。这样，Kea "
"会在测试应用性质之前执行该初始化函数。 这样可以确保在每次测试开始时，应用都处于预期的初始状态。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:103
msgid ""
"这个功能可以用来在测试应用性质之前设置应用程序的初始状态。 例如，可以使用此功能进行登录、向应用程序添加数据等。 "
"如果不需要设置应用程序的初始状态，可以跳过此步骤。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:107
msgid "此外，如果用户想使用主路径引导探索策略，需要使用 ``@mainPath()`` 装饰器定义一个函数来设置一个主路径函数。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:109
msgid "为了给该应用完成该步骤，可以使用以下代码来定义主路径。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:121
msgid "上述代码可以引导 Kea 在 Omninotes 中创建一条内容为“read a book #Tag1”的笔记。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:125
msgid ""
"在主路径定义部分，只能使用 UI 操作命令来完成定义； 该函数目前不支持其他 Python 语句，例如 for 循环。 "
"但我们认为这种方法足以实现主路径的功能。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:129
msgid "太棒了！到此，你已经学会了如何使用性质描述语言从错误报告中提取并定义一个应用性质。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:131
msgid "要测试这个性质，用户需要将其放入定义的一个类中，该类继承自 ``KeaTest`` 类。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:177
msgid "在这里，需要在继承自 ``KeaTest`` 类的 ``Test`` 类中编写定义该性质。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:179
msgid ""
"我们将这个性质脚本文件 ``example_mainpath_property.py`` 放在 ``example`` 目录中。 "
"用户可以通过运行以下命令来测试应用的该性质。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:186
msgid ""
"当你尝试测试这个性质时，你可能会迅速发现两个新的错误，这些错误违反了该性质。 "
"然后，你可以撰写相应的错误报告并提交给应用程序的开发人员。这两个错误目前都已被开发人员修复。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:189
msgid "你可以查看这两个错误的报告："
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:191
msgid ""
"`Bug Report: Note tag cannot be removed <https://github.com/federicoiosue"
"/Omni-Notes/issues/942>`_."
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:194
msgid ""
"`Bug Report: Deleting One Tag in a Note Affects Another Tag in the Same "
"Note <https://github.com/federicoiosue/Omni-Notes/issues/949>`_."
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:197
msgid "从指定应用程序功能中提取性质"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:198
msgid ""
"接下来是一个完整的示例，展示了如何从应用 `Amaze "
"<https://github.com/TeamAmaze/AmazeFileManager>`_ 的功能中提取性质。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:200
msgid ""
"`Amaze <https://github.com/TeamAmaze/AmazeFileManager>`_ "
"是一个文件管理应用程序。它提供了简洁直观的用户界面，允许用户轻松浏览、管理和操作文件。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:202
msgid ""
"在 Amaze 中，你可以创建一个文件夹，并且在创建后新文件夹应该存在。因此，你可以定义一个性质 "
"``create_folder_should_exist``。 这意味着当你想要创建一个文件夹时，它应该能够被成功创建。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:206
msgid ""
"你任然需要使用 ``@rule()`` 和 ``@precondition()`` 来完成应用性质的定义。 在这个样例中，前置条件 *P* "
"是创建新文件夹的按钮需要存在，并处于能够创建文件夹的界面上。 交互场景 *I* 是一些创建文件夹的操作事件序列。 最后，后置条件 *Q* "
"是检查新创建的文件夹是否存在。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:225
msgid "太好了！你已经学会了如何从应用程序功能中编写应用性质。"
msgstr ""

#: ../source/part-keaUserManuel/tutorial.rst:229
msgid ""
"用户可以在一个 ``.py`` 文件中编写一个应用程序的单个性质或多个性质。也可以将多个性质写在多个 .py 文件中。 "
"如果选择第一种方法，用户需要确保在一个 .py 文件中最多只有一个 ``@initializer()`` 和一个 ``@mainPath()``，"
" 同时有多个 ``@rule()`` 和 ``@precondition()`` "
"来对应不同的性质。测试用例的结构如下图所示（请根据需要添加图像或示例代码）。"
msgstr ""

