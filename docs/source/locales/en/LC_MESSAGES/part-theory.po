# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, ECNU-SE-lab
# This file is distributed under the same license as the Kea package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kea 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-30 19:40+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../source/part-theory/introduction.rst:2
msgid "简介"
msgstr ""

#: ../source/part-theory/introduction.rst:3
msgid ""
"保障移动应用质量是移动操作系统生态建设的关键。现有业界普遍采用的移动应用测试与分析技术（如人工/脚本测试、静态分析技术、界面测试技术） "
"存在人力成本高、检错能力弱、功能场景无感知的局限性，很难用于自动化检测移动应用的功能测试中。因此，如何实现移动应用的自动化功能测试一直是一个具有挑战性的问题。"
msgstr ""

#: ../source/part-theory/introduction.rst:6
msgid ""
"基于性质测试理论（Property-Based Testing，PBT）于2000年在函数式编程领域提出。 "
"该理论方法以被测系统应满足的性质为测试断言， 通过自动生成大量随机输入数据以验证这些性质是否在各种情况下保持正确。 "
"与传统测试相比，基于性质的测试能够高效有效地覆盖被测系统输入空间及其边界情况，从而发现深层次的功能缺陷。"
msgstr ""

#: ../source/part-theory/introduction.rst:10
msgid ""
"Kea是首个基于性质测试理论设计开发的移动应用自动化功能测试工具，目前支持鸿蒙 (OpenHarmony/HarmonyOS) 和安卓 "
"(Android) 应用软件的自动化功能测试。 "
"Kea设计了：(1)一种面向移动应用的性质描述语言（可支持用户编写以前置条件、交互场景、后置条件为主要形式的应用功能性质），(2)三种页面探索策略：随机遍历、基于主路径遍历、大模型引导的路径遍历（自动生成事件序列来达到应用更深层的状态，有效覆盖移动应用事件探索空间）。"
msgstr ""

#: ../source/part-theory/introduction/Advantage.rst:2
msgid "Kea 的优势"
msgstr ""

#: ../source/part-theory/introduction/Advantage.rst:4
msgid ""
"在传统的应用测试中，我们一般会进行静态分析，动态遍历测试，脚本测试。我们可以从 **输入空间** 、 **功能相关性** 两个 "
"维度评估这些测试方法对 **功能性缺陷** 的查错能力。"
msgstr ""

#: ../source/part-theory/introduction/Advantage.rst:7
msgid "静态分析的输入空间小，仅对源代码利用静态分析的算法进行分析。功能相关性低，分析难以贴近真实应用功能。"
msgstr ""

#: ../source/part-theory/introduction/Advantage.rst:9
msgid ""
"动态遍历测试(Fuzzing)的输入空间大，可以生成大量不同的输入，从而到达不同的应用状态。然而其功能相关性低， "
"一个应用功能可由一条多个事件组合而成的路径表示，随机测试的过程难以完整走出一个完整的应用功能路径。"
msgstr ""

#: ../source/part-theory/introduction/Advantage.rst:12
msgid "脚本测试的输入空间小，一个脚本测试由初始化，应用功能执行脚本及断言组成，始终为一个单一的路径。功能相关性高， 每个脚本都定义了一个功能。"
msgstr ""

#: ../source/part-theory/introduction/Advantage.rst:15
msgid ""
"上述三种传统测试方法的能力可以通过以下的坐标图显示，此前没有一种测试方法能同时达成高输入空间和高功能相关性。 "
"因此，我们提出将基于性质的测试方法应用于移动应用的功能测试领域，此方法能同时达成高功能相关性和高输入空间，从而对应用的功能正确性进行充分验证。"
msgstr ""

#: ../source/part-theory/introduction/Advantage.rst:21
msgid "Kea 与传统测试方法的能力对比示意图"
msgstr ""

#: ../source/part-theory/introduction/Advantage.rst:23
msgid "这里列举了 Kea 的一些优势："
msgstr ""

#: ../source/part-theory/introduction/Advantage.rst:25
msgid "基于性质的测试：Kea 引入了一种通用且实用的测试技术，基于性质的测试（PBT），能够有效验证应用的功能性。"
msgstr ""

#: ../source/part-theory/introduction/Advantage.rst:27
msgid "低维护成本：与传统的脚本测试相比，应用性质的维护成本较低，减少了测试人员的工作负担。"
msgstr ""

#: ../source/part-theory/introduction/Advantage.rst:29
msgid "强大的功能缺陷检测能力：Kea 在检测移动应用中的功能性缺陷方面非常强大，能够自动探索并验证应用的性质，快速发现潜在问题。"
msgstr ""

#: ../source/part-theory/introduction/procedure.rst:4
msgid "工作原理"
msgstr ""

#: ../source/part-theory/introduction/procedure.rst:9
msgid "kea 核心流程"
msgstr ""

#: ../source/part-theory/introduction/procedure.rst:11
msgid "Kea 的核心流程如上图，以下是一些执行流程的细节："
msgstr ""

#: ../source/part-theory/introduction/procedure.rst:13
msgid ""
"1. 步骤1：分析被测移动应用功能特性和测试目标，使用软件功能性质描述语言定义被测移动应用的功能性质集合， 每个功能性质包括前置条件 ``P`` "
"、交互场景 ``I`` 和后置条件 ``Q``；"
msgstr ""

#: ../source/part-theory/introduction/procedure.rst:16
msgid ""
"2. 将所有定义的功能性质集合的并集存储下来，设置最大测试执行时长、最大执行事件个数，选择探索策略， "
"若选择随机探索策略，则执行步骤3；若选择主路径引导策略，则根据前置条件 ``P``， "
"定义一个用户事件序列作为主路径，继续执行步骤4；若选择大语言模型引导探索策略，则执行步骤5；"
msgstr ""

#: ../source/part-theory/introduction/procedure.rst:20
msgid ""
"3. 使用随机探索策略生成事件序列，执行性质检测，记录对应的测试结果和用户界面截图， "
"直到达到最大测试执行时间，执行步骤6；:ref:`random`"
msgstr ""

#: ../source/part-theory/introduction/procedure.rst:23
msgid ""
"4. 使用主路径引导策略生成事件序列，执行性质检测，记录对应的测试结果和用户界面截图， "
"直到达到最大测试执行时间，执行步骤6；:ref:`main_path`"
msgstr ""

#: ../source/part-theory/introduction/procedure.rst:26
msgid ""
"5. 使用大语言模型引导策略生成事件序列，执行性质检测，记录对应的测试结果和用户界面截图， "
"直到达到最大测试执行时间，执行步骤6；:ref:`llm`"
msgstr ""

#: ../source/part-theory/introduction/procedure.rst:29
msgid "基于测试结果和用户界面截图，自动生成被测移动应用的缺陷报告；"
msgstr ""

