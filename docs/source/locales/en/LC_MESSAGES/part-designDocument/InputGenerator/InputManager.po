# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, ECNU-SE-lab
# This file is distributed under the same license as the Kea package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kea 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-31 16:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:2
msgid "InputManager"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:4
msgid "本部分旨在解释 Kea 的中的策略及输入控制器类 InputManager 的设计与实现。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:8
msgid "功能设计与实现"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:10
msgid "InputManager类是事件生成器的控制类，负责启动、停止事件的生成， 并负责根据指定的输入策略生成和发送事件，支持随机探索策略、主路径引导策略和LLM策略。 该类提供了灵活的事件管理机制，允许用户自定义事件生成策略，并能够根据应用的运行状态动态调整事件发送。 InputManager所包含的主要方法有："
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:15
msgid "获取当前测试用户所选择的探索策略。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:16
msgid "添加事件到设备的执行事件列表等待执行。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:17
msgid "使用当前探索策略开始生成事件进行测试。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:18
msgid "停止生成事件，结束此次测试。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:23
msgid "InputManager 类的组成"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:27
msgid "为了便于读者理解，本文中提供的代码段简化版本仅对核心流程进行抽象并展示，实际代码与简化的参考代码不完全一致。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:30
msgid "类属性"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:32
msgid "``DEFAULT_POLICY``: 默认的输入策略名称。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:33
msgid "``RANDOM_POLICY``: 随机输入策略名称。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:34
msgid "``DEFAULT_EVENT_INTERVAL``: 默认事件间隔时间。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:35
msgid "``DEFAULT_EVENT_COUNT``: 默认生成事件的数量。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:36
msgid "``DEFAULT_TIMEOUT``: 默认超时时间。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:37
msgid "``DEFAULT_DEVICE_SERIAL``: 默认设备序列号。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:38
msgid "``DEFAULT_UI_TARPIT_NUM``: 默认UI陷阱数量。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:41
msgid "InputManager类中的数据结构"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:43
msgid "**device**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:45
msgid "device是Device的对象，用于记录当前测试的设备信息,便于后续对设备的交互操作。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:47
msgid "**app**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:49
msgid "app是App的对象，用于记录当前所测试的移动应用的信息。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:51
msgid "**policy & policy_name**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:53
msgid "policy_name是string类型，用于存储用户所选择的探索策略名。policy是具体探索策略类的对象。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:55
msgid "**event_count & event_interval & number_of_events_that_restart_app**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:57
msgid "这三个成员变量均为整型。event_count记录从测试开始到现在生成的事件个数；event_interval记录了用户设置的两个事件之间停顿的时间； number_of_events_that_restart_app为多少个事件后需要重启应用程序。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:60
msgid "**kea**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:62
msgid "kea为Kea类的对象，用于生成事件过程中从Kea类中取出记录数据来完成对应用性质的测试。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:64
msgid "**enabled**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:66
msgid "enabled为bool类型，用于记录当前事件生成器是否需要继续生成事件，默认值为True。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:68
msgid "**generate_utg**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:70
msgid "enerate_utg为bool类型用于记录用户所设置的是否生成UI转移图的参数，便于生成事件的过程中判断是否应该生成UI转移图。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:72
msgid "**sim_caculator**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:74
msgid "sim_caculator为Similarity的对象，用于计算上一个界面状态与当前界面状态之间的相似性。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:77
msgid "InputManager类中的成员方法"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:80
msgid "构造函数"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:82
msgid "``__init__`` 方法用于初始化InputManager实例，设置事件发送的基本参数，并根据提供的策略名称初始化对应的输入策略。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:0
msgid "参数"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:85
msgid "``device``: Device实例，表示目标设备。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:86
msgid "``app``: App实例，表示目标应用。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:87
msgid "``policy_name``: 字符串，指定生成事件的策略名称。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:88
msgid "``random_input``: 布尔值，指示是否使用随机输入。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:89
msgid "``event_interval``: 事件间隔时间。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:90
msgid "``event_count``: 事件生成数量，默认为``DEFAULT_EVENT_COUNT``。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:91
msgid "``profiling_method``: 分析方法，用于性能分析。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:92
msgid "``kea``: Kea实例，用于性质测试。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:93
msgid "``number_of_events_that_restart_app``: 重启应用的事件数量。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:94
msgid "``generate_utg``: 布尔值，指示是否生成UTG。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:0
msgid "核心流程"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:97
msgid "初始化日志记录器。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:98
msgid "设置事件发送参数。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:99
msgid "根据策略名称初始化输入策略。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:100
msgid "设置相似度计算器。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:103
msgid "获取探索策略的方法"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:105
msgid "**get_input_policy**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:107
msgid "get_input_policy 方法根据用户所选择的policy_name来实例化对应的探索策略对象。 实例化的对象存储在policy成员变量里。支持的策略包括：随机探索策略、主路径引导策略和LLM策略。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:111
msgid "``device``: Device实例。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:112
msgid "``app``: App实例。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:0
msgid "返回"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:115
msgid "本次测试使用的策略实例。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:118
msgid "根据策略名称判断使用哪种输入策略。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:119
msgid "创建对应的输入策略实例。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:137
msgid "事件生成器的控制方法"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:139
msgid "**start**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:141
msgid "start 方法用于启动所选定的探索策略。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:144
msgid "记录开始发送事件的日志。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:145
msgid "根据输入策略开始发送事件。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:146
msgid "处理键盘中断，确保优雅退出。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:158
msgid "**stop**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:160
msgid "stop 方法用于结束探索过程。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:163
msgid "终止事件发送。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:164
msgid "清理事件发送相关的资源。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:165
msgid "记录停止发送事件的日志。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:172
msgid "**add_event**"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:174
msgid "add_event添加一个事件到事件列表，并将该事件发送给移动设备。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:177
msgid "``event``: 要添加的事件，应为AppEvent的子类。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:180
msgid "将事件添加到事件列表。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:181
msgid "创建事件日志记录器。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:182
msgid "根据事件间隔时间发送事件到设备。"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:199
msgid "使用方法"
msgstr ""

#: ../../source/part-designDocument/InputGenerator/InputManager.rst:201
msgid "InputManager类的主要作用是控制事件生成器并管理应用运行期间的事件发送。 用户可以通过构造函数初始化InputManager实例，并设置相应的参数，如测试设备、被测应用、策略名称等。 然后，可以通过start方法启动事件生成器。通过add_event方法添加单个事件，并发送。通过stop方法停止生成事件。"
msgstr ""
