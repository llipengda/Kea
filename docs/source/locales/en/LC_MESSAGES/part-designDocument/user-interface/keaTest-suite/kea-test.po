# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, ECNU-SE-lab
# This file is distributed under the same license as the Kea package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kea 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-31 16:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/part-designDocument/user-interface/keaTest-suite/kea-test.rst:2
msgid "KeaTest"
msgstr "KeaTest"

#: ../../source/part-designDocument/user-interface/keaTest-suite/kea-test.rst:4
msgid "本部分旨在解释 Kea 的性质定义类 KeaTest 是如何设计及实现的。"
msgstr "This section aims to explain how the property definition class KeaTest in Kea is designed and implemented."

#: ../../source/part-designDocument/user-interface/keaTest-suite/kea-test.rst:7
msgid "功能设计与实现"
msgstr "Functional Design and Implementation"

#: ../../source/part-designDocument/user-interface/keaTest-suite/kea-test.rst:9
msgid "KeaTest 是提供给用户编写性质的测试类。继承 KeaTest 就创建了一个测试样例。"
msgstr "KeaTest is a test class provided for users to write properties. Inheriting from KeaTest creates a test case."

#: ../../source/part-designDocument/user-interface/keaTest-suite/kea-test.rst:11
msgid "在继承的 KeaTest 子类中，我们编写对应的函数，并通过装饰器的方式定义性质中的初始化函数(Initializer)、 前置条件(Precodition)、交互场景(Rule)和主路径函数(MainPath)。"
msgstr "In the inherited KeaTest subclasses, we write corresponding functions and define the initialization function (Initializer), preconditions (Precondition), interaction scenarios (Rule), and main path functions (MainPath) using decorators."

#: ../../source/part-designDocument/user-interface/keaTest-suite/kea-test.rst:14
msgid "KeaTest 是一个空类，本质上是为用户提供了一个容器，Kea会在此容器中寻找用户自定义的性质，并将其加载入 Kea 中。在实现层面， 用户继承 KeaTest 编写自己的性质。而 Kea 通过识别并载入 KeaTest 的子类以实现读取用户的性质。"
msgstr "KeaTest is an empty class that essentially provides a container for users, and Kea searches for user-defined properties within this container and loads them into Kea. At the implementation level, users inherit KeaTest to write their own properties. Kea reads user properties by recognizing and loading subclasses of KeaTest."
